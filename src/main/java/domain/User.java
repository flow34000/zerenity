package domain;

// Generated 9 nov. 2015 19:47:09 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", uniqueConstraints = @UniqueConstraint(columnNames = "user_mail"), schema = "public")
@XmlRootElement	(name ="user")
public class User implements java.io.Serializable {

	private short userId;
	private String userFirstname;
	private String userLastname;
	private String userAdresse;
	private String userCity;
	private String userCp;
	private String userMail;
	private String userPwd;
	private boolean isAdmin;
	private boolean isParticipant;
	private boolean isMember;
	private boolean isManager;
	private Set<Notification> notifications = new HashSet<Notification>(0);
	private Set<Userorder> userorders = new HashSet<Userorder>(0);
	private Set<Event> events = new HashSet<Event>(0);
	private Set<Cotisation> cotisations = new HashSet<Cotisation>(0);
	private Set<Inscription> inscriptions = new HashSet<Inscription>(0);
	private Set<Activity> activities = new HashSet<Activity>(0);

	public User() {
	}

	public User(short userId, String userFirstname, String userLastname,
			String userAdresse, String userCity, String userCp,
			String userMail, String userPwd, boolean isAdmin,
			boolean isParticipant, boolean isMember, boolean isManager) {
		this.userId = userId;
		this.userFirstname = userFirstname;
		this.userLastname = userLastname;
		this.userAdresse = userAdresse;
		this.userCity = userCity;
		this.userCp = userCp;
		this.userMail = userMail;
		this.userPwd = userPwd;
		this.isAdmin = isAdmin;
		this.isParticipant = isParticipant;
		this.isMember = isMember;
		this.isManager = isManager;
	}

	public User(short userId, String userFirstname, String userLastname,
			String userAdresse, String userCity, String userCp,
			String userMail, String userPwd, boolean isAdmin,
			boolean isParticipant, boolean isMember, boolean isManager,
			Set<Notification> notifications, Set<Userorder> userorders,
			Set<Event> events, Set<Cotisation> cotisations,
			Set<Inscription> inscriptions, Set<Activity> activities) {
		this.userId = userId;
		this.userFirstname = userFirstname;
		this.userLastname = userLastname;
		this.userAdresse = userAdresse;
		this.userCity = userCity;
		this.userCp = userCp;
		this.userMail = userMail;
		this.userPwd = userPwd;
		this.isAdmin = isAdmin;
		this.isParticipant = isParticipant;
		this.isMember = isMember;
		this.isManager = isManager;
		this.notifications = notifications;
		this.userorders = userorders;
		this.events = events;
		this.cotisations = cotisations;
		this.inscriptions = inscriptions;
		this.activities = activities;
	}

	@Id
	@Column(name = "user_id", unique = true, nullable = false)
	@SequenceGenerator(name="userIdSeq", sequenceName="public.user_id_seq", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="userIdSeq")
	public short getUserId() {
		return this.userId;
	}

	public void setUserId(short userId) {
		this.userId = userId;
	}

	@Column(name = "user_firstname", nullable = false, length = 25)
	public String getUserFirstname() {
		return this.userFirstname;
	}

	public void setUserFirstname(String userFirstname) {
		this.userFirstname = userFirstname;
	}

	@Column(name = "user_lastname", nullable = false, length = 25)
	public String getUserLastname() {
		return this.userLastname;
	}

	public void setUserLastname(String userLastname) {
		this.userLastname = userLastname;
	}

	@Column(name = "user_adresse", nullable = false, length = 50)
	public String getUserAdresse() {
		return this.userAdresse;
	}

	public void setUserAdresse(String userAdresse) {
		this.userAdresse = userAdresse;
	}

	@Column(name = "user_city", nullable = false, length = 25)
	public String getUserCity() {
		return this.userCity;
	}

	public void setUserCity(String userCity) {
		this.userCity = userCity;
	}

	@Column(name = "user_cp", nullable = false, length = 5)
	public String getUserCp() {
		return this.userCp;
	}

	public void setUserCp(String userCp) {
		this.userCp = userCp;
	}

	@Column(name = "user_mail", unique = true, nullable = false, length = 50)
	public String getUserMail() {
		return this.userMail;
	}

	public void setUserMail(String userMail) {
		this.userMail = userMail;
	}

	@Column(name = "user_pwd", nullable = false)
	public String getUserPwd() {
		return this.userPwd;
	}

	public void setUserPwd(String userPwd) {
		this.userPwd = userPwd;
	}

	@Column(name = "is_admin", nullable = false)
	public boolean isIsAdmin() {
		return this.isAdmin;
	}

	public void setIsAdmin(boolean isAdmin) {
		this.isAdmin = isAdmin;
	}

	@Column(name = "is_participant", nullable = false)
	public boolean isIsParticipant() {
		return this.isParticipant;
	}

	public void setIsParticipant(boolean isParticipant) {
		this.isParticipant = isParticipant;
	}

	@Column(name = "is_member", nullable = false)
	public boolean isIsMember() {
		return this.isMember;
	}

	public void setIsMember(boolean isMember) {
		this.isMember = isMember;
	}

	@Column(name = "is_manager", nullable = false)
	public boolean isIsManager() {
		return this.isManager;
	}

	public void setIsManager(boolean isManager) {
		this.isManager = isManager;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Notification> getNotifications() {
		return this.notifications;
	}

	public void setNotifications(Set<Notification> notifications) {
		this.notifications = notifications;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Userorder> getUserorders() {
		return this.userorders;
	}

	public void setUserorders(Set<Userorder> userorders) {
		this.userorders = userorders;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Event> getEvents() {
		return this.events;
	}

	public void setEvents(Set<Event> events) {
		this.events = events;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Cotisation> getCotisations() {
		return this.cotisations;
	}

	public void setCotisations(Set<Cotisation> cotisations) {
		this.cotisations = cotisations;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Inscription> getInscriptions() {
		return this.inscriptions;
	}

	public void setInscriptions(Set<Inscription> inscriptions) {
		this.inscriptions = inscriptions;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "user")
	public Set<Activity> getActivities() {
		return this.activities;
	}

	public void setActivities(Set<Activity> activities) {
		this.activities = activities;
	}

}
