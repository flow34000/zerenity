package domain;

// Generated 4 nov. 2015 13:38:10 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Event generated by hbm2java
 */
@Entity
@Table(name = "event", schema = "public")
public class Event implements java.io.Serializable {

	private short eventId;
	private Repetition repetition;
	private User User;
	private Room room;
	private Activity activity;
	private String eventName;
	private Date eventStartDate;
	private Date eventEndDate;
	private Double eventPrice;
	private Set inscriptions = new HashSet(0);
	private Set excludeddates = new HashSet(0);

	public Event() {
	}

	public Event(short eventId, User User, Room room,
			Date eventStartDate, Date eventEndDate) {
		this.eventId = eventId;
		this.User = User;
		this.room = room;
		this.eventStartDate = eventStartDate;
		this.eventEndDate = eventEndDate;
	}

	public Event(short eventId, Repetition repetition,
			User User, Room room, Activity activity,
			String eventName, Date eventStartDate, Date eventEndDate,
			Double eventPrice, Set inscriptions, Set excludeddates) {
		this.eventId = eventId;
		this.repetition = repetition;
		this.User = User;
		this.room = room;
		this.activity = activity;
		this.eventName = eventName;
		this.eventStartDate = eventStartDate;
		this.eventEndDate = eventEndDate;
		this.eventPrice = eventPrice;
		this.inscriptions = inscriptions;
		this.excludeddates = excludeddates;
	}

	@Id
	@Column(name = "event_id", unique = true, nullable = false)
	public short getEventId() {
		return this.eventId;
	}

	public void setEventId(short eventId) {
		this.eventId = eventId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "repetition_id")
	public Repetition getRepetition() {
		return this.repetition;
	}

	public void setRepetition(Repetition repetition) {
		this.repetition = repetition;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "participant", nullable = false)
	public User getUser() {
		return this.User;
	}

	public void setUser(User User) {
		this.User = User;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "room_id", nullable = false)
	public Room getRoom() {
		return this.room;
	}

	public void setRoom(Room room) {
		this.room = room;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "activity_id")
	public Activity getActivity() {
		return this.activity;
	}

	public void setActivity(Activity activity) {
		this.activity = activity;
	}

	@Column(name = "event_name", length = 50)
	public String getEventName() {
		return this.eventName;
	}

	public void setEventName(String eventName) {
		this.eventName = eventName;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "event_start_date", nullable = false, length = 13)
	public Date getEventStartDate() {
		return this.eventStartDate;
	}

	public void setEventStartDate(Date eventStartDate) {
		this.eventStartDate = eventStartDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "event_end_date", nullable = false, length = 13)
	public Date getEventEndDate() {
		return this.eventEndDate;
	}

	public void setEventEndDate(Date eventEndDate) {
		this.eventEndDate = eventEndDate;
	}

	@Column(name = "event_price", precision = 17, scale = 17)
	public Double getEventPrice() {
		return this.eventPrice;
	}

	public void setEventPrice(Double eventPrice) {
		this.eventPrice = eventPrice;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
	public Set getInscriptions() {
		return this.inscriptions;
	}

	public void setInscriptions(Set inscriptions) {
		this.inscriptions = inscriptions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "event")
	public Set getExcludeddates() {
		return this.excludeddates;
	}

	public void setExcludeddates(Set excludeddates) {
		this.excludeddates = excludeddates;
	}

}
